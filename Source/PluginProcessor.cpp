/*
    ==============================================================================

    This file was partly auto-generated by JUCE.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "SfzGlobals.h"
#include <algorithm>

//==============================================================================
SfzpluginAudioProcessor::SfzpluginAudioProcessor()
     : AudioProcessor (BusesProperties().withOutput ("Output", AudioChannelSet::stereo(), true))
{
    loadingThread.startThread(8);
    formatManager.registerBasicFormats();
}

SfzpluginAudioProcessor::~SfzpluginAudioProcessor()
{
    auto threadStopped = loadingThread.stopThread(1000);
    jassert(threadStopped);
}

//==============================================================================
const String SfzpluginAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool SfzpluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool SfzpluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool SfzpluginAudioProcessor::isMidiEffect() const
{
   #if JucePlugin_IsMidiEffect
    return true;
   #else
    return false;
   #endif
}

double SfzpluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int SfzpluginAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int SfzpluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void SfzpluginAudioProcessor::setCurrentProgram (int index)
{
}

const String SfzpluginAudioProcessor::getProgramName (int index)
{
    return {};
}

void SfzpluginAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void SfzpluginAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    this->sampleRate = sampleRate;
    sfzSynth.prepareToPlay(sampleRate, samplesPerBlock);
}

void SfzpluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    if (audioSource != nullptr)
        audioSource->releaseResources();
}

#ifndef JucePlugin_PreferredChannelConfigurations
bool SfzpluginAudioProcessor::isBusesLayoutSupported (const BusesLayout& layouts) const
{
  #if JucePlugin_IsMidiEffect
    ignoreUnused (layouts);
    return true;
  #else
    // This is the place where you check if the layout is supported.
    // In this template code we only support mono or stereo.
    if (layouts.getMainOutputChannelSet() != AudioChannelSet::mono()
     && layouts.getMainOutputChannelSet() != AudioChannelSet::stereo())
        return false;

    // This checks if the input layout matches the output layout
   #if ! JucePlugin_IsSynth
    if (layouts.getMainOutputChannelSet() != layouts.getMainInputChannelSet())
        return false;
   #endif

    return true;
  #endif
}
#endif

void SfzpluginAudioProcessor::processBlock (AudioBuffer<float>& buffer, MidiBuffer& midiMessages)
{
    ScopedNoDenormals noDenormals;
    const auto totalNumInputChannels  = getTotalNumInputChannels();
    const auto totalNumOutputChannels = getTotalNumOutputChannels();

    const auto numSamples = buffer.getNumSamples();
    keyboardState.processNextMidiBuffer(midiMessages, 0, numSamples, true);

    for (auto i = totalNumInputChannels; i < totalNumOutputChannels; ++i)
        buffer.clear (i, 0, numSamples);

    MidiBuffer::Iterator it { midiMessages };
	MidiMessage msg;
	int timestamp;
	while (it.getNextEvent(msg, timestamp))
	{
		// DBG("[Timestamp " << timestamp << " ] Midi event: " << msg.getDescription()); 
		if (msg.isController())
			sfzSynth.registerCC(msg.getChannel(), msg.getControllerNumber(), msg.getControllerValue(), timestamp);
        if (msg.isNoteOn())
			sfzSynth.registerNoteOn(msg.getChannel(), msg.getNoteNumber(), msg.getVelocity(), timestamp);
        if (msg.isNoteOff())
			sfzSynth.registerNoteOff(msg.getChannel(), msg.getNoteNumber(), msg.getVelocity(), timestamp);
        if (msg.isChannelPressure())
			sfzSynth.registerAftertouch(msg.getChannel(), msg.getAfterTouchValue(), timestamp); 
        if (msg.isPitchWheel())
			sfzSynth.registerPitchWheel(msg.getChannel(), msg.getPitchWheelValue(), timestamp);        
	}

    sfzSynth.renderNextBlock(buffer, 0, numSamples);
    
    for (int channel = 0; channel < totalNumInputChannels; ++channel)
    {
        auto* channelData = buffer.getWritePointer (channel);
        // ..do something to the data...
    }
}

//==============================================================================
bool SfzpluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* SfzpluginAudioProcessor::createEditor()
{
    return new SfzpluginAudioProcessorEditor (*this, this->keyboardState, this->sfzSynth);
}

//==============================================================================
void SfzpluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void SfzpluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new SfzpluginAudioProcessor();
}
